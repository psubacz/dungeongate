// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/games/game_service_v1.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameService_StartGame_FullMethodName          = "/dungeongate.games.v1.GameService/StartGame"
	GameService_StopGame_FullMethodName           = "/dungeongate.games.v1.GameService/StopGame"
	GameService_GetGameSession_FullMethodName     = "/dungeongate.games.v1.GameService/GetGameSession"
	GameService_ListActiveSessions_FullMethodName = "/dungeongate.games.v1.GameService/ListActiveSessions"
	GameService_ListAvailableGames_FullMethodName = "/dungeongate.games.v1.GameService/ListAvailableGames"
	GameService_GetGameInfo_FullMethodName        = "/dungeongate.games.v1.GameService/GetGameInfo"
	GameService_StreamGameEvents_FullMethodName   = "/dungeongate.games.v1.GameService/StreamGameEvents"
	GameService_AttachToGame_FullMethodName       = "/dungeongate.games.v1.GameService/AttachToGame"
	GameService_SendGameInput_FullMethodName      = "/dungeongate.games.v1.GameService/SendGameInput"
	GameService_Health_FullMethodName             = "/dungeongate.games.v1.GameService/Health"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GameService provides game management operations
type GameServiceClient interface {
	// StartGame starts a new game session
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	// StopGame stops an active game session
	StopGame(ctx context.Context, in *StopGameRequest, opts ...grpc.CallOption) (*StopGameResponse, error)
	// GetGameSession gets information about a game session
	GetGameSession(ctx context.Context, in *GetGameSessionRequest, opts ...grpc.CallOption) (*GetGameSessionResponse, error)
	// ListActiveSessions lists all active game sessions
	ListActiveSessions(ctx context.Context, in *ListActiveSessionsRequest, opts ...grpc.CallOption) (*ListActiveSessionsResponse, error)
	// ListAvailableGames lists all available games
	ListAvailableGames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAvailableGamesResponse, error)
	// GetGameInfo gets information about a specific game
	GetGameInfo(ctx context.Context, in *GetGameInfoRequest, opts ...grpc.CallOption) (*GetGameInfoResponse, error)
	// StreamGameEvents streams game events (for monitoring and spectating)
	StreamGameEvents(ctx context.Context, in *StreamGameEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameEvent], error)
	// AttachToGame attaches to an existing game session for spectating
	AttachToGame(ctx context.Context, in *AttachToGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameData], error)
	// SendGameInput sends input to a game session
	SendGameInput(ctx context.Context, in *SendGameInputRequest, opts ...grpc.CallOption) (*SendGameInputResponse, error)
	// Health check
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, GameService_StartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StopGame(ctx context.Context, in *StopGameRequest, opts ...grpc.CallOption) (*StopGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopGameResponse)
	err := c.cc.Invoke(ctx, GameService_StopGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetGameSession(ctx context.Context, in *GetGameSessionRequest, opts ...grpc.CallOption) (*GetGameSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameSessionResponse)
	err := c.cc.Invoke(ctx, GameService_GetGameSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) ListActiveSessions(ctx context.Context, in *ListActiveSessionsRequest, opts ...grpc.CallOption) (*ListActiveSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActiveSessionsResponse)
	err := c.cc.Invoke(ctx, GameService_ListActiveSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) ListAvailableGames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAvailableGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableGamesResponse)
	err := c.cc.Invoke(ctx, GameService_ListAvailableGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetGameInfo(ctx context.Context, in *GetGameInfoRequest, opts ...grpc.CallOption) (*GetGameInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameInfoResponse)
	err := c.cc.Invoke(ctx, GameService_GetGameInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) StreamGameEvents(ctx context.Context, in *StreamGameEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[0], GameService_StreamGameEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamGameEventsRequest, GameEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamGameEventsClient = grpc.ServerStreamingClient[GameEvent]

func (c *gameServiceClient) AttachToGame(ctx context.Context, in *AttachToGameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GameData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GameService_ServiceDesc.Streams[1], GameService_AttachToGame_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AttachToGameRequest, GameData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_AttachToGameClient = grpc.ServerStreamingClient[GameData]

func (c *gameServiceClient) SendGameInput(ctx context.Context, in *SendGameInputRequest, opts ...grpc.CallOption) (*SendGameInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGameInputResponse)
	err := c.cc.Invoke(ctx, GameService_SendGameInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, GameService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility.
//
// GameService provides game management operations
type GameServiceServer interface {
	// StartGame starts a new game session
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	// StopGame stops an active game session
	StopGame(context.Context, *StopGameRequest) (*StopGameResponse, error)
	// GetGameSession gets information about a game session
	GetGameSession(context.Context, *GetGameSessionRequest) (*GetGameSessionResponse, error)
	// ListActiveSessions lists all active game sessions
	ListActiveSessions(context.Context, *ListActiveSessionsRequest) (*ListActiveSessionsResponse, error)
	// ListAvailableGames lists all available games
	ListAvailableGames(context.Context, *emptypb.Empty) (*ListAvailableGamesResponse, error)
	// GetGameInfo gets information about a specific game
	GetGameInfo(context.Context, *GetGameInfoRequest) (*GetGameInfoResponse, error)
	// StreamGameEvents streams game events (for monitoring and spectating)
	StreamGameEvents(*StreamGameEventsRequest, grpc.ServerStreamingServer[GameEvent]) error
	// AttachToGame attaches to an existing game session for spectating
	AttachToGame(*AttachToGameRequest, grpc.ServerStreamingServer[GameData]) error
	// SendGameInput sends input to a game session
	SendGameInput(context.Context, *SendGameInputRequest) (*SendGameInputResponse, error)
	// Health check
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServiceServer struct{}

func (UnimplementedGameServiceServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedGameServiceServer) StopGame(context.Context, *StopGameRequest) (*StopGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopGame not implemented")
}
func (UnimplementedGameServiceServer) GetGameSession(context.Context, *GetGameSessionRequest) (*GetGameSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameSession not implemented")
}
func (UnimplementedGameServiceServer) ListActiveSessions(context.Context, *ListActiveSessionsRequest) (*ListActiveSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveSessions not implemented")
}
func (UnimplementedGameServiceServer) ListAvailableGames(context.Context, *emptypb.Empty) (*ListAvailableGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableGames not implemented")
}
func (UnimplementedGameServiceServer) GetGameInfo(context.Context, *GetGameInfoRequest) (*GetGameInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameInfo not implemented")
}
func (UnimplementedGameServiceServer) StreamGameEvents(*StreamGameEventsRequest, grpc.ServerStreamingServer[GameEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGameEvents not implemented")
}
func (UnimplementedGameServiceServer) AttachToGame(*AttachToGameRequest, grpc.ServerStreamingServer[GameData]) error {
	return status.Errorf(codes.Unimplemented, "method AttachToGame not implemented")
}
func (UnimplementedGameServiceServer) SendGameInput(context.Context, *SendGameInputRequest) (*SendGameInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGameInput not implemented")
}
func (UnimplementedGameServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}
func (UnimplementedGameServiceServer) testEmbeddedByValue()                     {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StopGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StopGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_StopGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StopGame(ctx, req.(*StopGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetGameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetGameSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGameSession(ctx, req.(*GetGameSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_ListActiveSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).ListActiveSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_ListActiveSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).ListActiveSessions(ctx, req.(*ListActiveSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_ListAvailableGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).ListAvailableGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_ListAvailableGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).ListAvailableGames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetGameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetGameInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGameInfo(ctx, req.(*GetGameInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_StreamGameEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGameEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).StreamGameEvents(m, &grpc.GenericServerStream[StreamGameEventsRequest, GameEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_StreamGameEventsServer = grpc.ServerStreamingServer[GameEvent]

func _GameService_AttachToGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AttachToGameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).AttachToGame(m, &grpc.GenericServerStream[AttachToGameRequest, GameData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GameService_AttachToGameServer = grpc.ServerStreamingServer[GameData]

func _GameService_SendGameInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).SendGameInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_SendGameInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).SendGameInput(ctx, req.(*SendGameInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dungeongate.games.v1.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _GameService_StartGame_Handler,
		},
		{
			MethodName: "StopGame",
			Handler:    _GameService_StopGame_Handler,
		},
		{
			MethodName: "GetGameSession",
			Handler:    _GameService_GetGameSession_Handler,
		},
		{
			MethodName: "ListActiveSessions",
			Handler:    _GameService_ListActiveSessions_Handler,
		},
		{
			MethodName: "ListAvailableGames",
			Handler:    _GameService_ListAvailableGames_Handler,
		},
		{
			MethodName: "GetGameInfo",
			Handler:    _GameService_GetGameInfo_Handler,
		},
		{
			MethodName: "SendGameInput",
			Handler:    _GameService_SendGameInput_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _GameService_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGameEvents",
			Handler:       _GameService_StreamGameEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AttachToGame",
			Handler:       _GameService_AttachToGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/games/game_service_v1.proto",
}
